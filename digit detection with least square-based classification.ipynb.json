{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from PIL import Image\n",
    "\n",
    "#creates a np array to store flattened images. since the size of each img is 28*28 pixels and we have 2400 training images, \n",
    "#the array is 2400 by 785 (one extra column because thats a numpy requiremet).\n",
    "images = np.ones([2400,785])\n",
    "path= \"/Users/iqra/Desktop/Test/\"\n",
    "\n",
    "\n",
    "#flattens all the trainin data\n",
    "def getXTilda():\n",
    "    path = \"/Users/iqra/Desktop/Train/\"\n",
    "    X = np.ones([2400, 785 ])\n",
    "    for i in range(2400):\n",
    "        curri = i+1\n",
    "        newpath = path + str(curri) + \".jpg\"\n",
    "        img = Image.open(newpath)\n",
    "        image = np.asarray(img).flatten()\n",
    "        image = np.append(image, [1])\n",
    "    X[i] =  image\n",
    "    return X\n",
    "#get training labels\n",
    "def getT(number):\n",
    "    T = np.ones([2400])\n",
    "    T *= -1\n",
    "    start =  number*240\n",
    "    for i in range (240):\n",
    "        T[start+i] *=-1\n",
    "    return T\n",
    "#calculates first part of weight equation\n",
    "def getA(X):\n",
    "    Xtranspose = X.transpose()\n",
    "    dotProduct = Xtranspose.dot(X)\n",
    "    inverse = np.linalg.pinv(dotProduct)\n",
    "    A = inverse.dot(Xtranspose)\n",
    "    return A\n",
    "\n",
    "def getW(A, Y):\n",
    "    arr=[None] * 2400\n",
    "    for i in range(2400):\n",
    "        arr[i]=A*Y[i]\n",
    "    return arr\n",
    "\n",
    "def test(path):\n",
    "    X = getXTilda()\n",
    "    A = getA(X)\n",
    "    resultLabels = np.ones([200])\n",
    "    \n",
    "    for i in range(200):\n",
    "        curri = i+1\n",
    "        newpath = path + str(curri) + \".jpg\"\n",
    "        img = Image.open(newpath)\n",
    "        image = np.asarray(img).flatten()\n",
    "        image = np.append(image, [1])\n",
    "    \n",
    "        outputWeights = np.zeros([10])\n",
    "        for j in range(10):\n",
    "            currW = getW(A, getT(j)); \n",
    "            outputWeights[j] = image.dot(currW)\n",
    "        maxElement = np.amax(outputWeights)\n",
    "        index = np.where(outputWeights == maxElement)\n",
    "        resultLabels[i] = index[0][0]\n",
    "    return resultLabels\n",
    "\n",
    "def confusionMat(original, result):\n",
    "    cm = np.zeros([10, 10])\n",
    "    for i in range(len(original)):\n",
    "        cm[int(original[i])][int(result[i])] += 1\n",
    "        \n",
    "    return cm.astype(int)\n",
    "\n",
    "resultLabels=test(path)\n",
    "cm = confusionMat(originalLabels, resultLabels)\n",
    "print(cm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
